<?php

/**
 * @file
 * Provides advanced recurring billing for licenses.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function commerce_license_billing_ctools_plugin_directory($module, $plugin) {
  if ($module == 'commerce_license_billing') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function commerce_license_billing_ctools_plugin_type() {
  $plugins['billing_cycle_engine'] = array(
    'classes' => array('class'),
  );

  return $plugins;
}

/**
 * Returns the available billing cycle engine plugins.
 */
function commerce_license_billing_cycle_engine_plugins() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('commerce_license_billing', 'billing_cycle_engine');
  foreach ($plugins as $key => $plugin) {
    if (!class_exists($plugin['class'])) {
      // Invalid class specified.
      unset($plugins[$key]);
      continue;
    }
  }
  uasort($plugins, 'ctools_plugin_sort');
  return $plugins;
}

/**
 * Implements hook_entity_info().
 */
function commerce_license_billing_entity_info() {
  // commerce_license_billing_cycle_type is too long for Drupal, so all
  // entity types and field names had to have their prefix shortened to cl_.
  // Yuck.
  $entity_info['cl_billing_cycle'] = array(
    'label' => t('Commerce License Billing Cycle'),
    'module' => 'commerce_license_billing',
    'base table' => 'cl_billing_cycle',
    'entity class' => 'CommerceLicenseBillingCycle',
    'controller class' => 'EntityAPIController',
    'label callback' => 'entity_class_label',
    'fieldable' => FALSE,
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'name',
    ),
    'entity keys' => array(
      'id' => 'billing_cycle_id',
      'bundle' => 'type',
    ),
  );
  // Bypass entity_load() as it cannot be used here (recursion).
  $billing_cycle_type = db_select('cl_billing_cycle_type', 'bct')
    ->fields('bct', array('name', 'title'))
    ->execute()
    ->fetchAllKeyed();
  foreach ($billing_cycle_type as $name => $title) {
    $entity_info['cl_billing_cycle']['bundles'][$name] = array(
      'label' => $title,
    );
  }

  $entity_info['cl_billing_cycle_type'] = array(
    'label' => t('Commerce License Billing Cycle Type'),
    'module' => 'commerce_license_billing',
    'base table' => 'cl_billing_cycle_type',
    'access callback' => 'commerce_license_billing_cycle_type_access',
    'controller class' => 'EntityBundlePluginEntityControllerExportable',
    'fieldable' => TRUE,
    'exportable' => TRUE,
    'bundles' => array(),
    'bundle of' => 'cl_billing_cycle',
    'bundle plugin' => array(
      'plugin type' => 'billing_cycle_engine',
    ),
    'entity keys' => array(
      'id' => 'billing_cycle_type_id',
      'bundle' => 'engine',
      'label' => 'title',
      'name' => 'name',
    ),
    'admin ui' => array(
      'path' => 'admin/commerce/config/license/billing-cycle-types',
      'file' => 'includes/commerce_license_billing.cycle_type_ui.inc',
      'controller class' => 'CommerceLicenseBillingCycleTypeUIController',
    ),
  );
  // Bypass entity_load() as it cannot be used here (recursion).
  foreach (commerce_license_billing_cycle_engine_plugins() as $name => $plugin) {
    $entity_info['cl_billing_cycle_type']['bundles'][$name] = array(
      'label' => $plugin['title'],
    );
  }

  return $entity_info;
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_license_billing_entity_info_alter(&$entity_info) {
  $entity_info['commerce_order']['bundles']['recurring'] = array(
    'label' => t('Recurring'),
  );
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_license_billing_commerce_line_item_type_info() {
  $line_item_types = array();
  $line_item_types['recurring'] = array(
    'type' => 'recurring',
    'name' => t('Recurring'),
    'description' => t('References a product in a recurring order.'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add product'),
    'base' => 'commerce_product_line_item',
  );

  return $line_item_types;
}

/**
 * Access callback for the entity API.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $cycle_type
 *   (optional) A cycle type to check access for. If nothing is given, access
 *   for all cycle types is determined.
 * @param $account
 *   (optional) The user to check for. Leave it to NULL to check for the global
 *   user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function commerce_license_billing_cycle_type_access($op, $cycle_type = NULL, $account = NULL) {
  $engines = commerce_license_billing_cycle_engine_plugins();
  return user_access('administer licenses', $account) && !empty($engines);
}

/**
 * Implements hook_commerce_order_state_info().
 */
function commerce_license_billing_commerce_order_state_info() {
  $order_states['recurring'] = array(
    'name' => 'recurring',
    'title' => t('Recurring order'),
    'description' => t('Orders in this state are used for recurring payments.'),
    'weight' => 10,
    'default_status' => 'recurring_open',
  );
  return $order_states;
}

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_license_billing_commerce_order_status_info() {
  $order_statuses = array();
  $order_statuses['recurring_open'] = array(
    'name' => 'recurring_open',
    'title' => t('Recurring open'),
    'state' => 'recurring',
  );
  return $order_statuses;
}

/**
 * Implements hook_flush_caches().
 */
function commerce_license_billing_flush_caches() {
  commerce_license_billing_configure_product_types();
  commerce_license_billing_configure_line_item_type();
  commerce_license_billing_configure_order_type();
}

/**
 * Implements hook_cron().
 */
function commerce_license_billing_cron() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'cl_billing_cycle')
    ->propertyCondition('status', 1)
    ->propertyCondition('expire', REQUEST_TIME, '<');
  $results = $query->execute();
  if (!empty($results['cl_billing_cycle'])) {
    foreach (array_keys($results['cl_billing_cycle']) as $billing_cycle_id) {
      $queue = DrupalQueue::get('commerce_license_billing_close_cycle');
      $task = array(
        'id' => $billing_cycle_id,
      );
      $queue->createItem($task);
    }
  }
}

/**
 * Implements hook_advanced_queue_info().
 */
function commerce_license_billing_advanced_queue_info() {
  return array(
    'commerce_license_billing_close_cycle' => array(
      'worker callback' => 'commerce_license_billing_close_cycle',
    ),
  );
}

/**
 * Advanced queue worker callback.
 */
function commerce_license_billing_close_cycle($item) {
  $billing_cycle = entity_load_single('cl_billing_cycle', $item->data['id']);
  $billing_cycle->status = 0;
  entity_save('cl_billing_cycle', $billing_cycle);
  return array(
    'status' => ADVANCEDQUEUE_STATUS_SUCCESS,
    'result' => 'Processed Billing cycle' . $item->data['id'],
  );
}

/**
 * Creates recurring orders for products in the provided order.
 *
 * The provided order is first scanned, and all licensable products are
 * gathered. Their billing cycle types are gathered, and the appropriate
 * billing cyles are opened (if they haven't been previously).
 * An order per billing cycle is created (if it hasn't been previously),
 * and the new line items are added.
 *
 * @param $order
 *   The order to use as a base of the new recurring order.
 */
function commerce_license_billing_create_recurring_order($order) {
  // Group licenses by billing cycle type.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_cycle_type_ids = array();
  $grouped_licenses = array();
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    if (!empty($line_item_wrapper->value()->commerce_license)) {
      $product_wrapper = $line_item_wrapper->commerce_product;
      if (!empty($product_wrapper->value()->cl_billing_cycle_type)) {
        $billing_cycle_type_id = $product_wrapper->cl_billing_cycle_type->raw();
        $billing_cycle_type_ids[] = $billing_cycle_type_id;
        $grouped_licenses[$billing_cycle_type_id][] = $line_item_wrapper->commerce_license->value();
      }
    }
  }
  // Load all found billing cycle types.
  $billing_cycle_types = entity_load('cl_billing_cycle_type', $billing_cycle_type_ids);

  // Ensure there's a recurring order for each group of licenses.
  foreach ($grouped_licenses as $billing_cycle_type_id => $licenses) {
    $billing_cycle_type = $billing_cycle_types[$billing_cycle_type_id];
    $billing_cycle = $billing_cycle_type->getBillingCycle();

    // Open the product history.
    foreach ($licenses as $license) {
      commerce_license_billing_product_history_open($license, $license->product_id);
    }

    // Check if there's an existing order attached to that billing cycle.
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'commerce_order')
      ->entityCondition('bundle', 'recurring')
      ->propertyCondition('status', 'recurring_open')
      ->propertyCondition('uid', $order->uid)
      ->fieldCondition('cl_billing_cycle', 'target_id', $billing_cycle->billing_cycle_id);
    $results = $query->execute();
    if (!empty($results['commerce_order'])) {
      $order_id = key($results['commerce_order']);
      $order = commerce_order_load($order_id);
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      foreach ($licenses as $license) {
        $line_items = commerce_license_billing_generate_line_items($billing_cycle, $license, $order_id);
      }
      $order_wrapper->commerce_line_items = array_merge($order_wrapper->commerce_line_items->value(), $line_items);
      $order_wrapper->save();
    }
    else {
      // Save the order right away to get the order_id.
      $order = commerce_order_new($order->uid, 'recurring_open', 'recurring');
      commerce_order_save($order);

      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      $order_wrapper->cl_billing_cycle = $billing_cycle_id;
      // Generate the line items based on license information.
      foreach ($licenses as $license) {
        $line_items = commerce_license_billing_generate_line_items($billing_cycle, $license, $order_wrapper->order_id->value());
      }
      $order_wrapper->commerce_line_items = $line_items;
      $order_wrapper->save();
    }
  }
}

/**
 * Generates the line items for the provided license and billing cycle.
 *
 * All line items have their prices prorated based on their duration and the
 * billing cycle duration.
 *
 * @param $billing_cycle
 *   The billing cycle entity.
 * @param $license
 *   The license entity.
 * @param $order
 *   The order_id to be set on the newly created line items.
 * @return
 *   An array of saved line items.
 */
function commerce_license_billing_generate_line_items($billing_cycle, $license, $order_id) {
  $billing_cycle_duration = $billing_cycle->end - $billing_cycle->start;
  $line_items = array();

  $history = commerce_license_billing_product_history_list($license);
  // Gather all products.
  foreach ($history as $history_entry) {
    $product_ids[] = $history_entry['product_id'];
  }
  $products = commerce_product_load_multiple($product_ids);
  // Create a line item per product.
  foreach ($history as $history_entry) {
    $product_id = $history_entry['product_id'];
    $product = $products[$product_id];
    // Calculate the prorated price.
    $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
    $price = $product_wrapper->commerce_price->value();
    if ($price['amount'] > 0) {
      $history_duration = $history_entry['end'] - $history_entry['start'];
      $price['amount'] *= $history_duration / $billing_cycle_duration;
      $price['amount'] = round($price['amount']);
    }

    $line_item = commerce_line_item_new('recurring', $order_id);
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $line_item_wrapper->line_item_label = $product->title;
    $line_item_wrapper->commerce_product = $product;
    $line_item_wrapper->quantity = 1;
    $line_item_wrapper->commerce_unit_price = $price;
    $line_item_wrapper->cl_billing_start = $history_entry['start'];
    $line_item_wrapper->cl_billing_end = $history_entry['end'];
    $line_item_wrapper->cl_billing_license = $license;
    // Trigger price calculation to get any needed discounts or price changes.
    rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
    // Save the line item.
    $line_item_wrapper->save();
    $line_items[] = $line_item_wrapper->value();
  }

  if ($license instanceof CommerceLicenseBillingUsageInterface) {
    foreach ($license->usageGroups() as $group_name => $group_info) {
      $current_usage = commerce_license_billing_current_usage($license, $group_name);
      if ($current_usage <= $group_info['free_quantity']) {
        // Current usage is free, there's nothing to charge for.
        continue;
      }

      $usage = commerce_license_billing_usage_list($this, $group_name);
      foreach ($usage as $usage_entry) {
        $product = commerce_product_load_by_sku($group_info['product']);
        // Calculate the prorated price.
        $product_wrapper = entity_metadata_wrapper('commerce_product', $product);
        $price = $product_wrapper->commerce_price->value();
        if ($price['amount'] > 0) {
          $usage_duration = $usage_entry['end'] - $usage_entry['start'];
          $price['amount'] *= $usage_duration / $billing_cycle_duration;
          $price['amount'] = round($price['amount']);
        }

        $line_item = commerce_line_item_new('recurring');
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
        $line_item_wrapper->line_item_label = $product_wrapper->title->value();
        $line_item_wrapper->commerce_product = $product;
        $line_item_wrapper->quantity = $usage['quantity'];
        $line_item_wrapper->commerce_unit_price = $price;
        $line_item_wrapper->cl_billing_start = $billing_cycle_duration['start'];
        $line_item_wrapper->cl_billing_end = $billing_cycle_duration['end'];
        $line_item_wrapper->cl_billing_license = $license;
        // Trigger price calculation to get any needed discounts or price changes.
        rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
        // Save the line item.
        $line_item_wrapper->save();
        $line_items[] = $line_item_wrapper->value();
      }
    }
  }

  return $line_items;
}

/**
 * Implements hook_commerce_license_update().
 *
 * Maintains the license product history.
 */
function commerce_license_billing_commerce_license_update($license) {
  $product = $license->wrapper->product->value();
  // No billing cycle type selected, this license is not billable.
  if (empty($product->cl_billing_cycle_type)) {
    return;
  }

  $status_changed = ($license->status > $license->original->status);
  $product_changed = ($license->product_id != $license->original->product_id);
  if ($license->status == COMMERCE_LICENSE_REVOKED && $status_changed) {
    // The license was just revoked.
    commerce_license_billing_product_history_close($license, $license->product_id);
  }
  elseif ($license->status == COMMERCE_LICENSE_ACTIVE && $product_changed) {
    // The license product has changed.
    commerce_license_billing_product_history_close($license, $license->original->product_id);
    commerce_license_billing_product_history_open($license, $license->product_id);
  }
}

/**
 * Creates an open license product history entry.
 *
 * @param $license
 *   The license entity.
 * @param $product_id
 *   The product id.
 */
function commerce_license_billing_product_history_open($license, $product_id) {
  db_insert('cl_product_history')
    ->fields(array(
      'license_id' => $license->license_id,
      'product_id' => $product_id,
      'start' => REQUEST_TIME,
    ))
    ->execute();
}

/**
 * Closes a license product history entry.
 *
 * @param $license
 *   The license entity.
 * @param $product_id
 *   The product id.
 */
function commerce_license_billing_product_history_close($license, $product_id) {
  db_update('cl_product_history')
    ->fields(array(
      'end' => REQUEST_TIME,
    ))
    ->condition('license_id', $license->license_id)
    ->condition('product_id', $product_id)
    ->condition('end', 0)
    ->execute();
}

/**
 * Returns all license product history entries.
 *
 * @param $license
 *   The license entity.
 *
 * @return
 *   An array of history entries.
 */
function commerce_license_billing_product_history_list($license) {
  $data = array(
    ':license_id' => $license->license_id,
  );
  $history = db_query("SELECT * FROM {cl_product_history} WHERE license_id = :license_id", $data)->fetchAll(PDO::FETCH_ASSOC);
  return $history;
}

/**
 * Adds usage for the specified license and usage group.
 *
 * @param $license
 *   The license entity.
 * @param $group
 *   The usage group, as defined by $license->usageGroups().
 * @param $quantity
 *   The usage quantity.
 * @param $start
 *   The unix timestamp when usage started. Optional if the usage group
 *   specified "immediate" => TRUE, otherwise required.
 * @param $end
 *   The unix timestamp when usage ended. Optional if the usage group
 *   specified "immediate" => TRUE, otherwise required.
 */
function commerce_license_billing_usage_add($license, $group, $quantity, $start = NULL, $end = NULL) {
  $usage_groups = $license->usageGroups();
  if (!isset($usage_groups[$group])) {
    throw new Exception('Invalid usage group specified for commerce_license_billing_usage_add().');
  }
  $usage_group = $usage_groups[$group];
  if (empty($usage_group['immediate']) && (!$start || !$end)) {
    throw new Exception('Empty $start or $end timestamps in commerce_license_billing_usage_add().');
  }
  // If usage reporting for this group is immediate, it is safe to initialize
  // $start to current time.
  if (!empty($usage_group['immediate']) && !$start) {
    $start = REQUEST_TIME;
  }

  db_insert('cl_billing_usage')
    ->fields(array(
      'license_id' => $license->license_id,
      'usage_group' => $group,
      'quantity' => $quantity,
      'start' => $start,
      'end' => (int) $end,
    ))
    ->execute();
}

/**
 * Clears usage for the provided license and usage group.
 *
 * @param  $license
 *   The license entity.
 * @param $group
 *   (Optional) The usage group, as defined by $license->usageGroups().
 */
function commerce_license_billing_usage_clear($license, $group = NULL) {
  $delete = db_delete('cl_billing_usage');
  $delete->condition('license_id', $license->license_id);
  if ($group) {
    $delete->condition('usage_group', $group);
  }
  $delete->execute();
}

/**
 * Returns the current usage for the provided license and usage group.
 *
 * If the usage group is of type 'counter', the total usage is returned.
 * If the usage group is of type 'gauge', the last reported usage is returned.
 *
 * @param  $license
 *   The license entity.
 * @param $group
 *   The usage group, as defined by $license->usageGroups().
 *
 * @return
 *   The numeric usage amount.
 */
function commerce_license_billing_current_usage($license, $group) {
  $usage_groups = $license->usageGroups();
  if (!isset($usage_groups[$group])) {
    throw new Exception('Invalid usage group specified for commerce_license_billing_current_usage().');
  }
  $usage_group = $usage_groups[$group];

  $data = array(
    ':license_id' => $license->license_id,
    ':group' => $group,
  );
  if ($usage_group['type'] == 'counter') {
    $usage = db_query("SELECT SUM(quantity) FROM {cl_billing_usage}
                    WHERE license_id = :license_id AND usage_group = :group
                      GROUP BY license_id, usage_group", $data)->fetchColumn();
  }
  elseif ($usage_group['type'] == 'gauge') {
    $usage = db_query("SELECT quantity FROM {cl_billing_usage}
                    WHERE license_id = :license_id AND usage_group = :group
                      ORDER BY start DESC LIMIT 1", $data)->fetchColumn();
  }

  return (int) $usage;
}

/**
 * Returns all usage for the provided license and usage group.
 *
 * @param  $license
 *   The license entity.
 * @param $group
 *   The usage group, as defined by $license->usageGroups().
 *
 * @return
 *   An array of usage records.
 */
function commerce_license_billing_usage_list($license, $group) {
  $usage_groups = $license->usageGroups();
  if (!isset($usage_groups[$group])) {
    throw new Exception('Invalid usage group specified for commerce_license_billing_usage_list().');
  }

  $data = array(
    ':license_id' => $license->license_id,
    ':group' => $group,
  );
  $usage = db_query("SELECT * FROM {cl_billing_usage}
                      WHERE license_id = :license_id AND usage_group = :group", $data)->fetchAll(PDO::FETCH_ASSOC);
  return (array) $usage;
}

/**
 * Ensures that the license product types have the required billing fields.
 *
 * Fields:
 * - cl_billing_cycle_type: an entityreference field pointing to the
 *   billing cycle type.
 * - cl_billing_type: an options field for selecting prepaid or postpaid.
 */
function commerce_license_billing_configure_product_types() {
  $field = field_info_field('cl_billing_cycle_type');
  if (empty($field)) {
    $field = array(
      'field_name' => 'cl_billing_cycle_type',
      'type' => 'entityreference',
      'cardinality' => 1,
      'translatable' => 0,
      'module' => 'entityreference',
      'settings' => array(
        'target_type' => 'cl_billing_cycle_type',
        'handler' => 'base',
      ),
    );
    field_create_field($field);
  }
  foreach (commerce_license_product_types() as $type_name) {
    $instance = field_info_instance('commerce_product', 'cl_billing_cycle_type', $type_name);
    if (empty($instance)) {
      $license_type_instance = field_info_instance('commerce_product', 'commerce_license_type', $type_name);
      $instance = array(
        'field_name' => 'cl_billing_cycle_type',
        'entity_type' => 'commerce_product',
        'bundle' => $type_name,
        'label' => 'License billing cycle type',
        'required' => FALSE,
        'widget' => array(
          'type' => 'options_select',
          'module' => 'options',
          // Make sure that this field is shown right after the license type.
          'weight' => $license_type_instance['widget']['weight'] + 1,
        ),
      );
      field_create_instance($instance);
    }
  }

  $field = field_info_field('cl_billing_type');
  if (empty($field)) {
    $field = array(
      'field_name' => 'cl_billing_type',
      'type' => 'list_text',
      'entity_type' => 'commerce_product',
      'cardinality' => 1,
      'translatable' => 0,
      'module' => 'list',
      'settings' => array(
        'allowed_values' => array(
          'prepaid' => 'Prepaid',
          'postpaid' => 'Postpaid'
        ),
      ),
    );
    field_create_field($field);
  }
  foreach (commerce_license_product_types() as $type_name) {
    $instance = field_info_instance('commerce_product', 'cl_billing_type', $type_name);
    if (empty($instance)) {
      $license_type_instance = field_info_instance('commerce_product', 'commerce_license_type', $type_name);
      $instance = array(
        'field_name' => 'cl_billing_type',
        'entity_type' => 'commerce_product',
        'bundle' => $type_name,
        'label' => 'License billing type',
        'required' => TRUE,
        'widget' => array(
          'type' => 'options_buttons',
          'module' => 'options',
          // Make sure that this field is shown right after the billing cycle type.
          'weight' => $license_type_instance['widget']['weight'] + 1,
        ),
      );
      field_create_instance($instance);
    }
  }
}

/**
 * Ensures that the recurring line item type has the required fields.
 *
 * Fields:
 * - cl_billing_start: a datetime field.
 * - cl_billing_end: a datetime field.
 * - cl_billing_license: an entityreference field pointing to the license
 *   for which the line item was generated.
 */
function commerce_license_billing_configure_line_item_type() {
  if (!$line_item_type = commerce_line_item_type_load('recurring')) {
    return;
  }
  // Make sure Commerce has created all of its required fields.
  commerce_line_item_configure_line_item_type($line_item_type);

  $field = field_info_field('cl_billing_start');
  if (empty($field)) {
    $field = array(
      'field_name' => 'cl_billing_start',
      'type' => 'datetime',
      'cardinality' => 1,
      'translatable' => 0,
      'module' => 'date',
    );
    field_create_field($field);
  }
  $instance = field_info_instance('commerce_line_item', 'cl_billing_start', 'recurring');
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'cl_billing_start',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'recurring',
      'label' => 'Billing cycle start',
      'required' => TRUE,
      'widget' => array(
        'type' => 'date_select',
        'module' => 'date',
      ),
    );
    field_create_instance($instance);
  }

  $field = field_info_field('cl_billing_end');
  if (empty($field)) {
    $field = array(
      'field_name' => 'cl_billing_end',
      'type' => 'datetime',
      'cardinality' => 1,
      'translatable' => 0,
      'module' => 'date',
    );
    field_create_field($field);
  }
  $instance = field_info_instance('commerce_line_item', 'cl_billing_end', 'recurring');
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'cl_billing_end',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'recurring',
      'label' => 'Billing cycle end',
      'required' => TRUE,
      'widget' => array(
        'type' => 'date_select',
        'module' => 'date',
      ),
    );
    field_create_instance($instance);
  }

  $field = field_info_field('cl_billing_license');
  if (!$field) {
    $field = array(
      'settings' => array(
        'handler' => 'base',
        'target_type' => 'commerce_license',
      ),
      'field_name' => 'cl_billing_license',
      'type' => 'entityreference',
    );
    field_create_field($field);
  }
  $instance = field_info_instance('commerce_line_item', 'cl_billing_license', 'recurring');
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'cl_billing_license',
      'entity_type' => 'commerce_line_item',
      'bundle' => 'recurring',
      'label' => 'License',
      'required' => TRUE,
    );

    field_create_instance($instance);
  }
}

/**
 * Ensures that the recurring order type has the required fields.
 *
 * Fields:
 * - cl_billing_cycle: an entityreference field pointing to a
 *   billing cycle.
 */
function commerce_license_billing_configure_order_type() {
  // Make sure Commerce has created all of its required fields.
  commerce_order_configure_order_type('recurring');

  $field = field_info_field('cl_billing_cycle');
  if (empty($field)) {
    $field = array(
      'field_name' => 'cl_billing_cycle',
      'type' => 'entityreference',
      'cardinality' => 1,
      'translatable' => 0,
      'module' => 'entityreference',
      'settings' => array(
        'target_type' => 'cl_billing_cycle',
        'handler' => 'base',
      ),
    );
    field_create_field($field);
  }
  $instance = field_info_instance('commerce_order', 'cl_billing_cycle', 'recurring');
  if (empty($instance)) {
    $instance = array(
      'field_name' => 'cl_billing_cycle',
      'entity_type' => 'commerce_order',
      'bundle' => 'recurring',
      'label' => 'Billing cycle',
      'required' => TRUE,
      'widget' => array(
        'type' => 'options_select',
        'module' => 'options',
      ),
    );
    field_create_instance($instance);
  }
}
